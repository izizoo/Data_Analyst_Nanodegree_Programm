geom_point() +
facet_wrap(~rating)
by(redWine$volatile.acidity, redWine$rating, summary)
ggplot(data = redWine,
aes(x = volatile.acidity, y = log10(sulphates),
color = quality)) +
geom_point() +
facet_wrap(~rating)
by(redWine$volatile.acidity, redWine$rating, summary)
ggplot(aes(x = rating, y = pH, fill = rating), data = redWine) +
geom_boxplot() +
labs(x = 'quality', y = 'pH',
title="pH & Quality")
by(redWine$alcohol, redWine$rating, summary)
cdplot(rating ~ volatile.acidity, data = redWine,
xlab = 'Volatile Acidity',
ylab = 'Quality',
main='Volatile Acidity & Quality')
ggplot(data = redWine,
aes(x = log10(sulphates), y = alcohol,
color = quality)) +
geom_point(alpha = 0.6, size = 1.2, position = 'jitter') +
facet_wrap(~rating) +
labs(x = 'log10(sulphates)', y = 'Alcohol (% by Volume)') +
ggtitle('Alcohol vs Sulphates')
# -------------------------------- sulphates -------------------------------
# This is a comparison of orginal sulphates and sulphates after logarithmic transformation
grid.arrange(
qplot(x = sulphates, data = redWine, binwidth = 0.01),
qplot(x = log10(sulphates), data = redWine, binwidth=0.01),
ncol = 2)
# Print statistics using pastec
stat.desc(redWine$sulphates)
stat.desc(log10(redWine$sulphates))
# Compare log10 fixed acidity and fixed acidity to
# get a more normal distribution
grid.arrange(qplot(x = fixed.acidity,
data = rw, binwidth = 0.1),
qplot(x = log10(fixed.acidity),
data = rw, binwidth=0.01), ncol = 2)
# Print out statistics using pastec library.
stat.desc(rw$fixed.acidity)
stat.desc(log10(rw$fixed.acidity))
# Compare log10 volatile acidity and volatile acidity
# to get a more normal distribution
grid.arrange(qplot(x = volatile.acidity,
data = rw, binwidth=0.01),
qplot(x = log10(volatile.acidity),
data = rw, binwidth = 0.01), ncol = 2)
# Print out statistics using pastec library.
stat.desc(rw$volatile.acidity)
stat.desc(log10(rw$volatile.acidity))
# -------------------------------- sulphates -------------------------------
# This is a comparison of orginal sulphates and sulphates after logarithmic transformation
grid.arrange(
qplot(x = sulphates, data = redWine, binwidth = 0.01),
qplot(x = log10(sulphates), data = redWine, binwidth=0.01),
ncol = 2)
# Print statistics using pastec
stat.desc(redWine$sulphates)
stat.desc(log10(redWine$sulphates))
# Compare sulphates to log 10 to get a more normal distribution
grid.arrange(qplot(x = sulphates, data = rw, binwidth = 0.01),
qplot(x = log10(sulphates), data = rw, binwidth=0.01), ncol = 2)
# Print out statistics using pastec library.
stat.desc(rw$sulphates)
stat.desc(log10(rw$sulphates))
# Compare log10 total sulfur dioxide to total sulfur dioxide to
# get a more normal distribution
grid.arrange(qplot(x = total.sulfur.dioxide,
data = rw, binwidth=1),
qplot(x = log10(total.sulfur.dioxide),
data = rw, binwidth = 0.04), ncol = 2)
# Print out statistics using pastec library.
stat.desc(rw$total.sulfur.dioxide)
stat.desc(log10(rw$total.sulfur.dioxide))
# -------------------------------- fixed.acidity -------------------------------
# This is a comparison of orginal fixed.acidity and fixed.acidity after logarithmic transformation
grid.arrange(qplot(x = fixed.acidity,
data = redWine, binwidth = 0.1),
qplot(x = log10(fixed.acidity),
data = redWine, binwidth=0.01), ncol = 2)
# Print statistics using pastec
stat.desc(redWine$fixed.acidity)
stat.desc(log10(redWine$fixed.acidity))
# -------------------------------- fixed.acidity -------------------------------
# This is a comparison of orginal fixed.acidity and fixed.acidity after logarithmic transformation
grid.arrange(qplot(x = fixed.acidity,
data = redWine, binwidth = 0.1),
qplot(x = log10(fixed.acidity),
data = redWine, binwidth=0.01), ncol = 2)
# Print statistics using pastec
stat.desc(redWine$fixed.acidity)
stat.desc(log10(redWine$fixed.acidity))
# Compare log10 fixed acidity and fixed acidity to
# get a more normal distribution
grid.arrange(qplot(x = fixed.acidity,
data = rw, binwidth = 0.1),
qplot(x = log10(fixed.acidity),
data = rw, binwidth=0.01), ncol = 2)
# Print out statistics using pastec library.
stat.desc(rw$fixed.acidity)
stat.desc(log10(rw$fixed.acidity))
# Compare log10 volatile acidity and volatile acidity
# to get a more normal distribution
grid.arrange(qplot(x = volatile.acidity,
data = rw, binwidth=0.01),
qplot(x = log10(volatile.acidity),
data = rw, binwidth = 0.01), ncol = 2)
# Print out statistics using pastec library.
stat.desc(rw$volatile.acidity)
stat.desc(log10(rw$volatile.acidity))
# -------------------------------- fixed.acidity -------------------------------
# This is a comparison of orginal fixed.acidity and fixed.acidity after logarithmic transformation
grid.arrange(qplot(x = fixed.acidity,
data = redWine, binwidth = 0.1),
qplot(x = log10(fixed.acidity),
data = redWine, binwidth=0.01), ncol = 2)
# Print statistics using pastec
stat.desc(redWine$fixed.acidity)
stat.desc(log10(redWine$fixed.acidity))
# Compare sulphates to log 10 to get a more normal distribution
grid.arrange(qplot(x = sulphates, data = rw, binwidth = 0.01),
qplot(x = log10(sulphates), data = rw, binwidth=0.01), ncol = 2)
# Print out statistics using pastec library.
stat.desc(rw$sulphates)
stat.desc(log10(rw$sulphates))
# Compare log10 total sulfur dioxide to total sulfur dioxide to
# get a more normal distribution
grid.arrange(qplot(x = total.sulfur.dioxide,
data = rw, binwidth=1),
qplot(x = log10(total.sulfur.dioxide),
data = rw, binwidth = 0.04), ncol = 2)
# Print out statistics using pastec library.
stat.desc(rw$total.sulfur.dioxide)
stat.desc(log10(rw$total.sulfur.dioxide))
ggplot(data = redWine,
aes(x = citric.acid, y = alcohol,
color = quality)) +
geom_point() +
facet_wrap(~rating)
ggplot(data = redWine,
aes(x = log10(sulphates), y = alcohol,
color = quality)) +
geom_point() +
facet_wrap(~rating)
ggplot(data = redWine,
aes(x = volatile.acidity, y = citric.acid,
color = quality)) +
coord_cartesian(xlim = c(0, 1.1), ylim = c(0, 0.625)) +
geom_point() +
facet_wrap(~rating)
by(redWine$volatile.acidity, redWine$rating, summary)
ggplot(data = redWine,
aes(x = volatile.acidity, y = log10(sulphates),
color = quality)) +
geom_point() +
facet_wrap(~rating)
by(redWine$volatile.acidity, redWine$rating, summary)
ggplot(aes(x = rating, y = pH, fill = rating), data = redWine) +
geom_boxplot() +
labs(x = 'quality', y = 'pH',
title="pH & Quality")
by(redWine$alcohol, redWine$rating, summary)
cdplot(rating ~ volatile.acidity, data = redWine,
xlab = 'Volatile Acidity',
ylab = 'Quality',
main='Volatile Acidity & Quality')
ggplot(data = redWine,
aes(x = log10(sulphates), y = alcohol,
color = quality)) +
geom_point(alpha = 0.6, size = 1.2, position = 'jitter') +
facet_wrap(~rating) +
labs(x = 'log10(sulphates)', y = 'Alcohol (% by Volume)') +
ggtitle('Alcohol vs Sulphates')
ggplot(data = redWine,
aes(x = citric.acid, y = alcohol,
color = quality)) +
geom_point() +
facet_wrap(~rating) +
scale_color_brewer(type='seq',
guide=guide_legend(title='Quality'))
ggplot(data = redWine,
aes(x = citric.acid, y = alcohol)) +
geom_point() +
facet_wrap(~rating) +
scale_color_brewer(type='seq',
guide=guide_legend(title='Quality'))
ggplot(data = redWine,
aes(x = citric.acid, y = alcohol,
color = quality)) +
geom_point() +
facet_wrap(~rating) +
ggplot(data = redWine,
aes(x = citric.acid, y = alcohol,
color = quality)) +
geom_point() +
facet_wrap(~rating)
ggplot(aes(x = alcohol,
y = residual.sugar  , color = factor(quality)),
data = red.wine) +
geom_point(alpha = 0.8, size = 1) +
geom_smooth(method = "lm", se = FALSE,size=1)  +
scale_color_brewer(type='seq',
guide=guide_legend(title='Quality'))
ggplot(aes(x = citric.acid,
y = alcohol  , color = factor(quality)),
data = red.wine) +
geom_point(alpha = 0.8, size = 1) +
geom_smooth(method = "lm", se = FALSE,size=1)  +
scale_color_brewer(type='seq',
guide=guide_legend(title='Quality'))
ggplot(aes(x = citric.acid,
y = alcohol  , color = factor(quality)),
data = redWine) +
geom_point(alpha = 0.8, size = 1) +
geom_smooth(method = "lm", se = FALSE,size=1)  +
scale_color_brewer(type='seq',
guide=guide_legend(title='Quality'))
ggplot(aes(x = citric.acid,
y = alcohol  , color = factor(quality)),
data = redWine) +
geom_point(alpha = 0.8, size = 1) +
geom_smooth(method = "lm", se = FALSE,size=1) + facet_wrap(~rating)   +
scale_color_brewer(type='seq',
guide=guide_legend(title='Quality'))
ggplot(data = redWine,
aes(x = citric.acid, y = alcohol,
color = quality)) +
geom_point() +
facet_wrap(~rating)
ggplot(aes(x = log10(sulphates),
y = alcohol  , color = factor(quality)),
data = redWine) +
geom_point(alpha = 0.8, size = 1) +
geom_smooth(method = "lm", se = FALSE,size=1) + facet_wrap(~rating)   +
scale_color_brewer(type='seq',
guide=guide_legend(title='Quality'))
ggplot(aes(x = volatile.acidity,
y = citric.acid  , color = factor(quality)),
data = redWine) +
geom_point(alpha = 0.8, size = 1) +
geom_smooth(method = "lm", se = FALSE,size=1) + facet_wrap(~rating)   +
scale_color_brewer(type='seq',
guide=guide_legend(title='Quality'))
by(redWine$volatile.acidity, redWine$rating, summary)
ggplot(aes(x = volatile.acidity,
y = log10(sulphates)  , color = factor(quality)),
data = redWine) +
geom_point(alpha = 0.8, size = 1) +
geom_smooth(method = "lm", se = FALSE,size=1) + facet_wrap(~rating)   +
scale_color_brewer(type='seq',
guide=guide_legend(title='Quality'))
by(redWine$volatile.acidity, redWine$rating, summary)
# Load all of the packages that you end up using
# in your analysis in this code chunk.
# Notice that the parameter "echo" was set to FALSE for this code chunk.
# This prevents the code from displaying in the knitted HTML output.
# You should set echo=FALSE for all code chunks in your file.
# Remove warnings globally
knitr::opts_chunk$set(fig.width=12, fig.height=8, fig.path='Figs/',
echo=FALSE, warning=FALSE, message=FALSE)
suppressMessages(library(reshape))
suppressMessages(library(reshape2))
suppressMessages(library(ggplot2))
suppressMessages(library(dplyr))
suppressMessages(library(RColorBrewer))
suppressMessages(library(GGally))
suppressMessages(library(scales))
suppressMessages(library(memisc))
suppressMessages(library(gridExtra))
suppressMessages(library(pastecs))
suppressMessages(library(corrplot))
# Load the Data
rw <- read.csv('wineQualityReds.csv')
# Remove x column as it's just an index
rw <- within(rw, rm(X))
str(rw)
summary(rw)
# Quality is a categorical variable, so let's convert it to an ordered factor
rw$quality <- factor(rw$quality, ordered = T)
table(rw$quality)
# Remove the top 1% for four columns that had the most drastic outliers.
rw <- rw[rw$fixed.acidity < quantile(rw$fixed.acidity, 0.99),]
rw <- rw[rw$residual.sugar < quantile(rw$residual.sugar, 0.99),]
rw <- rw[rw$total.sulfur.dioxide < quantile(rw$total.sulfur.dioxide, 0.99),]
rw <- rw[rw$free.sulfur.dioxide < quantile(rw$free.sulfur.dioxide, 0.99),]
summary(rw)
str(rw)
# To get a feel for any changes we'll need to make to the data
# (i.e., log10 transformations), I'll create histograms for each variable.
get_histogram <- function(var, xlabel) {
return (qplot(x = var, data = rw, xlab = xlabel))
}
grid.arrange(get_histogram(rw$fixed.acidity, 'fixed.acidity'),
get_histogram(rw$volatile.acidity, 'volatile.acidity'),
get_histogram(rw$citric.acid, 'citric.acid'),
get_histogram(rw$residual.sugar, 'residual.sugar'),
get_histogram(rw$chlorides, 'chlorides'),
get_histogram(rw$free.sulfur.dioxide, 'free.sulfur.dioxide'),
get_histogram(rw$total.sulfur.dioxide, 'total.sulfur.dioxide'),
get_histogram(rw$density, 'density'),
get_histogram(rw$pH, 'pH'),
get_histogram(rw$sulphates, 'sulphates'),
get_histogram(rw$alcohol, 'alcohol'),
get_histogram(rw$quality, 'quality'),
ncol = 3)
# Compare sulphates to log 10 to get a more normal distribution
grid.arrange(qplot(x = sulphates, data = rw, binwidth = 0.01),
qplot(x = log10(sulphates), data = rw, binwidth=0.01), ncol = 2)
# Print out statistics using pastec library.
stat.desc(rw$sulphates)
stat.desc(log10(rw$sulphates))
# Compare log10 total sulfur dioxide to total sulfur dioxide to
# get a more normal distribution
grid.arrange(qplot(x = total.sulfur.dioxide,
data = rw, binwidth=1),
qplot(x = log10(total.sulfur.dioxide),
data = rw, binwidth = 0.04), ncol = 2)
# Print out statistics using pastec library.
stat.desc(rw$total.sulfur.dioxide)
stat.desc(log10(rw$total.sulfur.dioxide))
# Compare log10 fixed acidity and fixed acidity to
# get a more normal distribution
grid.arrange(qplot(x = fixed.acidity,
data = rw, binwidth = 0.1),
qplot(x = log10(fixed.acidity),
data = rw, binwidth=0.01), ncol = 2)
# Print out statistics using pastec library.
stat.desc(rw$fixed.acidity)
stat.desc(log10(rw$fixed.acidity))
# Compare log10 volatile acidity and volatile acidity
# to get a more normal distribution
grid.arrange(qplot(x = volatile.acidity,
data = rw, binwidth=0.01),
qplot(x = log10(volatile.acidity),
data = rw, binwidth = 0.01), ncol = 2)
# Print out statistics using pastec library.
stat.desc(rw$volatile.acidity)
stat.desc(log10(rw$volatile.acidity))
# Test how quality is influenced by removing all entries where citric acid is 0
newrw <- rw[rw$citric.acid > 0,]
grid.arrange(qplot(rw$quality), qplot(newrw$quality), ncol=2)
# Convert quality into 3 subqualities: bad, average, excellent.
rw$rating <- ifelse(rw$quality < 5, 'bad',
ifelse(rw$quality < 7, 'average',
ifelse(rw$quality > 6, 'excellent', 'none')))
rw$rating <- ordered(rw$rating, levels = c('bad', 'average', 'excellent'))
summary(rw$rating)
qplot(rw$rating, xlab="quality")
# Create a correlation matrix
# Store quality as a number for comparing
rw$numquality <- as.numeric(rw$quality)
# Store tthe correlation matrix in a data frame
M <- cor(rw[c(1:11, 14)])
# Display the correlation matrix
corrplot(M, order = "hclust", insig = "pch", addrect = 3)
# Convert quality to a factor again.
# Create scatterplots for confirming relation with acidities and pH
# Fixed acidity vs pH
ggplot(aes(x = fixed.acidity, y = pH), data = rw) +
geom_point(color = "#F79420", alpha = 1/4) +
stat_smooth(method = 'lm')
cor(rw$fixed.acidity, rw$pH)
ggplot(aes(x = citric.acid, y = pH), data = rw) +
geom_point(color = "#F79420", alpha = 1/4) +
stat_smooth(method = 'lm')
cor(rw$citric.acid, rw$pH)
ggplot(aes(x = volatile.acidity, y = pH), data = rw) +
geom_point(color = "#F79420", alpha = 1/4) +
stat_smooth(method = 'lm')
cor(rw$volatile.acidity, rw$pH)
# Create boxplots for variables of interest
ggplot(aes(x = rating, y = pH), data = rw) +
geom_boxplot() +
stat_summary(fun.y = median, geom = 'point', shape = 4) +
coord_cartesian(ylim = c(2.85, 3.75)) +
labs(x = 'quality')
by(rw$pH, rw$rating, summary)
ggplot(aes(x = rating, y = alcohol), data = rw) +
geom_boxplot() +
stat_summary(fun.y = median, geom = 'point', shape = 4) +
labs(x = 'quality')
by(rw$alcohol, rw$rating, summary)
ggplot(aes(x = rating, y = volatile.acidity), data = rw) +
geom_boxplot() +
stat_summary(fun.y = median, geom = 'point', shape = 4) +
coord_cartesian(ylim = c(0.1, 1.2)) +
labs(x = 'quality')
by(rw$volatile.acidity, rw$rating, summary)
ggplot(aes(x = rating, y = citric.acid), data = rw) +
geom_boxplot() +
stat_summary(fun.y = median, geom = 'point', shape = 4) +
coord_cartesian(ylim = c(0, 0.76)) +
labs(x = 'quality')
by(rw$citric.acid, rw$rating, summary)
ggplot(aes(x = rating, y = sulphates), data = rw) +
geom_boxplot() +
stat_summary(fun.y = median, geom = 'point', shape = 4) +
coord_cartesian(ylim = c(0.2, 1.1)) +
labs(x = 'quality')
by(rw$sulphates, rw$rating, summary)
# Plot citric acid vs log10 sulphates
ggplot(data = rw, aes(x = log10(sulphates), y = citric.acid)) +
geom_point(alpha = 1/2, size = 1, position = 'jitter') +
stat_smooth(method = 'lm')
cor(log10(rw$sulphates), rw$citric.acid)
# Plot citric acid vs volatile acidity
ggplot(data = rw, aes(x = citric.acid, y = volatile.acidity)) +
geom_point(alpha = 1/2, size = 1, position = 'jitter') +
stat_smooth(method = 'lm')
cor(rw$citric.acid, rw$volatile.acidity)
# Plot alcohol vs pH
ggplot(data = rw, aes(x = alcohol, y = pH)) +
geom_point(alpha = 1/2, size = 1, position = 'jitter') +
stat_smooth(method = 'lm')
cor(rw$pH, rw$alcohol)
# Create scatterplots for variables of interest faceted by
# quality to look for relationships
# Sulphates vs Alcohol
ggplot(data = rw,
aes(x = log10(sulphates), y = alcohol,
color = quality)) +
geom_point() +
facet_wrap(~rating)
# Citric acid vs Alcohol
ggplot(data = rw,
aes(x = citric.acid, y = alcohol,
color = quality)) +
geom_point() +
facet_wrap(~rating)
# Sulphates vs Citric Acid
ggplot(data = rw,
aes(x = log10(sulphates), y = citric.acid,
color = quality)) +
geom_point() +
facet_wrap(~rating)
by(log10(rw$sulphates), rw$rating, summary)
# Chlorides vs Citric Acid
ggplot(data = rw,
aes(x = chlorides, y = citric.acid,
color = quality)) +
coord_cartesian(xlim = c(0, 0.2)) +
geom_point() +
facet_wrap(~rating)
by(rw$chlorides, rw$rating, summary)
# Residual Sugar vs Citric Acid
ggplot(data = rw,
aes(x = residual.sugar, y = citric.acid,
color = quality)) +
coord_cartesian(xlim = c(0, 4)) +
geom_point() +
facet_wrap(~rating)
by(rw$residual.sugar, rw$rating, summary)
# Volatile Acidity vs Citric Acid
ggplot(data = rw,
aes(x = volatile.acidity, y = citric.acid,
color = quality)) +
coord_cartesian(xlim = c(0, 1.1), ylim = c(0, 0.625)) +
geom_point() +
facet_wrap(~rating)
by(rw$volatile.acidity, rw$rating, summary)
ggplot(data = rw,
aes(x = volatile.acidity, y = alcohol,
color = quality)) +
geom_point() +
facet_wrap(~rating)
ggplot(data = rw,
aes(x = volatile.acidity, y = log10(sulphates),
color = quality)) +
geom_point() +
facet_wrap(~rating)
by(rw$volatile.acidity, rw$rating, summary)
# Create the linear model
m1 <- lm(as.numeric(quality) ~ alcohol, data = rw)
m2 <- update(m1, ~ . + sulphates)
m3 <- update(m2, ~ . + citric.acid)
m4 <- update(m3, ~ . + volatile.acidity)
mtable(m1, m2, m3, m4)
# Store the residuals (errors) in a data frame
residual <- data.frame(rw$quality, predict(m4, rw) - as.numeric(rw$quality))
names(residual) <- c("quality", "residual")
# Plot quality vs errors to get an idea how the linear model performed
ggplot(data = residual, aes(x = quality, y = residual)) +
geom_point(alpha = 0.3)
ggplot(aes(x = rating, y = alcohol, fill = rating), data = rw) +
geom_boxplot() +
stat_summary(fun.y = median, geom = 'point', shape = 4) +
labs(x = 'quality', y = 'Alcohol (% by Volume)',
title="Alcohol (% by Volume) vs. Quality")
by(rw$alcohol, rw$rating, summary)
# Arrange scatterplots together for important variables to
# compare and contrast patterns
ggplot(data = rw,
aes(x = log10(sulphates), y = alcohol,
color = quality)) +
geom_point(alpha = 0.6, size = 1.2, position = 'jitter') +
facet_wrap(~rating) +
labs(x = 'Sulphates (log10(g / dm^3))', y = 'Alcohol (% by Volume)') +
ggtitle('Alcohol vs Sulphates')
# Create conditional density plot with two of the arguably most
# important variable in determining bad wine.
cdplot(rating ~ volatile.acidity, data = rw,
xlab = 'Volatile Acidity (g / dm^3)',
ylab = 'Quality',
main='Volatile Acidity vs Quality')
# -------------------------------- volatile.acidity -------------------------------
# This is a comparison of orginal volatile.acidity and volatile.acidity after logarithmic transformation
grid.arrange(qplot(x = volatile.acidity,
data = redWine, binwidth=0.01),
qplot(x = log10(volatile.acidity),
data = redWine, binwidth = 0.01), ncol = 2)
